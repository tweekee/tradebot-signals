import os
import asyncio
import requests
import pandas as pd
import ta
import datetime
import pytz
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
FOREX_API_KEY = os.getenv("FOREX_API_KEY", "")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002108450567"))  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

if not BOT_TOKEN or ADMIN_ID == 0:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å .env (BOT_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TIMEFRAME = "1min"
SIGNALS_ENABLED = True
SIGNAL_LIMIT_PER_DAY = 15
signal_count_today = 0

# –ü–∞—Ä—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–µ–∫—Å
PAIRS = [
    "EUR/USD", "GBP/USD", "USD/JPY", "USD/CHF", "AUD/USD",
    "NZD/USD", "USD/CAD", "EUR/JPY", "EUR/GBP", "GBP/JPY"
]

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Twelve Data (—Ñ–æ—Ä–µ–∫—Å) ===
def get_forex_ohlcv(symbol, interval="1min", outputsize=100):
    try:
        base, quote = symbol.split("/")
        url = (
            f"https://api.twelvedata.com/time_series?"
            f"symbol={base}/{quote}&interval={interval}&outputsize={outputsize}&apikey={FOREX_API_KEY}"
        )
        r = requests.get(url, timeout=10)
        data = r.json()

        if "values" not in data:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {data}")
            return None

        df = pd.DataFrame(data["values"])
        df = df.rename(columns={"datetime": "time"})
        df = df.astype({
            "open": float, "high": float, "low": float, "close": float
        })
        df = df.sort_values("time").reset_index(drop=True)
        return df

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
        return None

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ ===
def check_strong_signal(df):
    df["ema_fast"] = ta.trend.EMAIndicator(df["close"], window=9).ema_indicator()
    df["ema_slow"] = ta.trend.EMAIndicator(df["close"], window=21).ema_indicator()
    df["rsi"] = ta.momentum.RSIIndicator(df["close"], window=14).rsi()
    macd = ta.trend.MACD(df["close"])
    df["macd"] = macd.macd()
    df["signal"] = macd.macd_signal()

    bullish = (
        df["ema_fast"].iloc[-1] > df["ema_slow"].iloc[-1] and
        df["rsi"].iloc[-1] < 45 and
        df["macd"].iloc[-1] > df["signal"].iloc[-1]
    )

    bearish = (
        df["ema_fast"].iloc[-1] < df["ema_slow"].iloc[-1] and
        df["rsi"].iloc[-1] > 55 and
        df["macd"].iloc[-1] < df["signal"].iloc[-1]
    )

    if bullish:
        return "–í–≤–µ—Ä—Ö"
    elif bearish:
        return "–í–Ω–∏–∑"
    else:
        return None

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

# === –¶–∏–∫–ª —Å–∏–≥–Ω–∞–ª–æ–≤ ===
async def signal_loop():
    global SIGNALS_ENABLED, signal_count_today
    print("‚úÖ –¶–∏–∫–ª —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω!")

    tz = pytz.timezone("Europe/Kiev")

    while True:
        now = datetime.datetime.now(tz)
        weekday = now.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

        # –¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏, —Å 10:00 –¥–æ 18:00
        if weekday >= 5 or now.hour < 10 or now.hour >= 18:
            if now.hour == 0 and signal_count_today != 0:
                signal_count_today = 0  # —Å–±—Ä–æ—Å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
                print("üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî —Å—á—ë—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω—É–ª—ë–Ω")
            await asyncio.sleep(300)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            continue

        if not SIGNALS_ENABLED or signal_count_today >= SIGNAL_LIMIT_PER_DAY:
            await asyncio.sleep(300)
            continue

        for pair in PAIRS:
            try:
                df = await asyncio.to_thread(get_forex_ohlcv, pair)
                if df is None:
                    continue

                signal = check_strong_signal(df)
                print(f"[{pair}] –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Üí {signal}")

                if signal:
                    signal_count_today += 1

                    # –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.send_message(
                        ADMIN_ID, 
                        f"‚è≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è —Å–∏–≥–Ω–∞–ª –ø–æ `{pair}`...", 
                        parse_mode="Markdown"
                    )
                    await asyncio.sleep(3)

                    msg = (
                        f"üìä <b>–°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!</b>\n"
                        f"–ü–∞—Ä–∞: <code>{pair}</code>\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal}\n"
                        f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {TIMEFRAME}\n"
                        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: EMA / RSI / MACD\n"
                        f"üïí {now.strftime('%H:%M:%S')}"
                    )
                    await bot.send_message(ADMIN_ID, msg, parse_mode="HTML")

                    if signal_count_today >= SIGNAL_LIMIT_PER_DAY:
                        await bot.send_message(ADMIN_ID, "‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                        break

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {pair}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å)
        await asyncio.sleep(1800)

# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
@dp.message(Command("start"))
async def start(message: Message):
    if not await is_subscribed(message.from_user.id):
        await message.answer("‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã!")
        return

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ñ–æ—Ä–µ–∫—Å-—Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/on ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n"
        "/off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n"
        "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"
    )

@dp.message(Command("on"))
async def on_cmd(message: Message):
    global SIGNALS_ENABLED
    SIGNALS_ENABLED = True
    await message.answer("‚úÖ –°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")

@dp.message(Command("off"))
async def off_cmd(message: Message):
    global SIGNALS_ENABLED
    SIGNALS_ENABLED = False
    await message.answer("‚õî –°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")

@dp.message(Command("status"))
async def status_cmd(message: Message):
    status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–´" if SIGNALS_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù–´"
    await message.answer(
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {signal_count_today}/{SIGNAL_LIMIT_PER_DAY}"
    )

@dp.message(Command("reset"))
async def reset_cmd(message: Message):
    global signal_count_today
    signal_count_today = 0
    await message.answer("üîÑ –°—á—ë—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"–ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    asyncio.create_task(signal_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
